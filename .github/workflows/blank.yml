name: Update GitHub Secrets from Vault

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:

jobs:
  update-secrets:
    runs-on: [self-hosted, Windows, x64]

    steps:
    
    - name: Install jq
      run: |
        # Download jq.exe
        Invoke-WebRequest -Uri https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe -OutFile $env:USERPROFILE\jq.exe
        # Add the directory to PATH for the current session
        [Environment]::SetEnvironmentVariable("PATH", "$env:USERPROFILE;$env:PATH", [System.EnvironmentVariableTarget]::Process)
        # Verify installation
        jq --version


    - name: Verify Vault Token
      env:
        VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
        VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      run: |
        vault.exe token lookup -format=json | jq '.data'
  
    - name: Cache Vault Data Hash
      id: cache_hash
      uses: actions/cache@v3
      with:
        path: .vault_data_hash
        key: vault-data-hash-${{ hashFiles('.vault_data_hash') }}
  
    - name: Check Vault for Changes
      id: check_vault
      env:
        VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
        VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      run: |
        # For KV Version 1
        $NEW_HASH = vault.exe kv get -format=json secret/myapp | jq -r '.data' | ConvertTo-Json
        if (Test-Path .vault_data_hash) {
          $OLD_HASH = Get-Content .vault_data_hash
        } else {
          $OLD_HASH = ""
        }
        if ($NEW_HASH -ne $OLD_HASH) {
          Write-Host "Vault data has changed."
          $NEW_HASH | Out-File .vault_data_hash
          echo "has_changed=true" | Out-File $env:GITHUB_OUTPUT -Append
        } else {
          Write-Host "No changes in Vault data."
          echo "has_changed=false" | Out-File $env:GITHUB_OUTPUT -Append
        }
  
    - name: Fetch Secrets from Vault
      id: fetch-secrets
      if: steps.check_vault.outputs.has_changed == 'true'
      env:
        VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
        VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
      run: |
        $SECRET_PATHS = @("secret/myapp")
        $SECRETS_JSON = @{}
        foreach ($SECRET_PATH in $SECRET_PATHS) {
          $SECRET_DATA = vault.exe kv get -format=json $SECRET_PATH | jq -r '.data' | ConvertFrom-Json
          $SECRETS_JSON += $SECRET_DATA
        }
        $SECRETS_JSON | ConvertTo-Json -Depth 100 | Out-File -FilePath secrets.json
        echo "SECRETS_JSON=$(Get-Content secrets.json)" | Out-File $env:GITHUB_ENV -Append
  
    - name: Update GitHub Secrets
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
        SECRETS_JSON: ${{ env.SECRETS_JSON }}
      run: |
        $REPO = $env:GITHUB_REPOSITORY -split "/"
        $OWNER = $REPO[0]
        $REPO_NAME = $REPO[1]
        $SECRETS = (Get-Content secrets.json | ConvertFrom-Json)
  
        foreach ($secret in $SECRETS.PSObject.Properties) {
          $secret_name = $secret.Name
          $secret_value = $secret.Value
  
          Write-Host "Updating secret: $secret_name"
  
          # Get the public key for the repository
          $response = Invoke-RestMethod -Headers @{ Authorization = "token $env:GH_PAT" } `
            -Uri "https://api.github.com/repos/$OWNER/$REPO_NAME/actions/secrets/public-key" `
            -UseBasicParsing
  
          $key_id = $response.key_id
          $public_key = $response.key
  
          # Convert the public key from base64 to bytes
          $publicKeyBytes = [Convert]::FromBase64String($public_key)
  
          # Encrypt the secret value using the public key
          $secretBytes = [System.Text.Encoding]::UTF8.GetBytes($secret_value)
          $rsa = [System.Security.Cryptography.RSA]::Create()
          $rsa.ImportSubjectPublicKeyInfo($publicKeyBytes, [ref]0)
          $encryptedBytes = $rsa.Encrypt($secretBytes, [System.Security.Cryptography.RSAEncryptionPadding]::OaepSHA256)
          $encrypted_value = [Convert]::ToBase64String($encryptedBytes)
  
          # Prepare the body for the API request
          $body = @{
            encrypted_value = $encrypted_value
            key_id = $key_id
          } | ConvertTo-Json
  
          # Update the secret
          Invoke-RestMethod -Method Put -Headers @{ Authorization = "token $env:GH_PAT" } `
            -Uri "https://api.github.com/repos/$OWNER/$REPO_NAME/actions/secrets/$secret_name" `
            -ContentType "application/json" -Body $body -UseBasicParsing
        }
