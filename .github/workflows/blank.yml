name: Update GitHub Secrets from Vault

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:

jobs:
  update-secrets:
    runs-on: [self-hosted, Windows, x64]

    steps:
    
    - name: Install jq
      run: |
        # Download jq.exe
        Invoke-WebRequest -Uri https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe -OutFile $env:USERPROFILE\jq.exe
        # Add the directory to PATH for the current session
        [Environment]::SetEnvironmentVariable("PATH", "$env:USERPROFILE;$env:PATH", [System.EnvironmentVariableTarget]::Process)
        # Verify installation
        jq --version


    - name: Verify Vault Token
      env:
        VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
        VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      run: |
        vault.exe token lookup -format=json | jq '.data'


    - name: Generate Cache Key
      id: generate-key
      run: |
        $hash = Get-FileHash .vault_data_hash -Algorithm SHA256
        echo "::set-output name=key::vault-data-hash-$($hash.Hash)"
      shell: powershell
    
    - name: Cache Vault Data
      uses: actions/cache@v3
      with:
        path: .vault_data_hash
        key: ${{ steps.generate-key.outputs.key }}
        fail-on-cache-miss: false

    - name: Save Cache
      uses: actions/cache@v3
      with:
        path: .vault_data_hash
        key: ${{ steps.generate-key.outputs.key }}
    
    - name: Check Vault for Changes
      id: check_vault
      env:
        VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
        VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      run: |
        $ErrorActionPreference = 'Stop'
    
        # Define the secret paths to check
        $SECRET_PATHS = @(
          "secret/myapp/frontend",
          "secret/myapp/backend"
        )
    
        # Initialize an array to hold the data from all secret paths
        $ALL_SECRET_DATA = @()
    
        foreach ($SECRET_PATH in $SECRET_PATHS) {
            Write-Host "Fetching data from: $SECRET_PATH"
    
            try {
                # Fetch the secrets from the current path
                $SECRET_DATA = vault.exe kv get -format=json $SECRET_PATH | jq -r '.data.data' | ConvertTo-Json -Depth 100
                Write-Host "Fetched data from $SECRET_PATH"
                # Add the data to the array
                $ALL_SECRET_DATA += $SECRET_DATA
            } catch {
                Write-Error "Failed to fetch secrets from Vault at path '$SECRET_PATH'. Error: $_"
                exit 1
            }
        }
    
        # Combine all secret data into a single JSON string
        $COMBINED_SECRET_DATA = $ALL_SECRET_DATA -join ""
        
        # Compute a hash of the combined secret data
        $NEW_HASH = [System.BitConverter]::ToString((New-Object System.Security.Cryptography.SHA256Managed).ComputeHash([System.Text.Encoding]::UTF8.GetBytes($COMBINED_SECRET_DATA))).Replace("-", "")
        
        # Check if the hash file exists
        if (Test-Path .vault_data_hash) {
          $OLD_HASH = Get-Content .vault_data_hash
        } else {
          $OLD_HASH = ""
        }
    
        if ($NEW_HASH -ne $OLD_HASH) {
          Write-Host "Vault data has changed."
          $NEW_HASH | Out-File .vault_data_hash
          echo "has_changed=true" | Out-File $env:GITHUB_OUTPUT -Append
        } else {
          Write-Host "No changes in Vault data."
          echo "has_changed=false" | Out-File $env:GITHUB_OUTPUT -Append
        }
  
    - name: Fetch Secrets from Vault
      id: fetch-secrets
      if: steps.check_vault.outputs.has_changed == 'true'
      env:
        VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
        VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      run: |
        $ErrorActionPreference = 'Stop'
        $SECRET_PATHS = @(
        "secret/myapp/frontend",
        "secret/myapp/backend"
        )
        $SECRETS_JSON = @{}
        
        foreach ($SECRET_PATH in $SECRET_PATHS) {
            Write-Host "Fetching secrets from: $SECRET_PATH"
            try {
                $SECRET_DATA = vault.exe kv get -format=json $SECRET_PATH | jq -r '.data.data' | ConvertFrom-Json
                Write-Host "Fetched data: $($SECRET_DATA | ConvertTo-Json -Depth 10)"
            } catch {
                Write-Error "Failed to fetch secrets from Vault. Error: $_"
                exit 1
            }
        
            # Ensure $SECRET_DATA is a PSCustomObject
            if ($SECRET_DATA -is [PSCustomObject]) {
                Write-Host "Secret data is a PSCustomObject."
            } else {
                Write-Error "Secret data is not a PSCustomObject. Actual type: $($SECRET_DATA.GetType())"
                exit 1
            }
        
            # Merge $SECRET_DATA into $SECRETS_JSON
            foreach ($property in $SECRET_DATA.PSObject.Properties) {
                $key = $property.Name
                $value = $property.Value
                $SECRETS_JSON[$key] = $value
            }
        }
        
        # Output secrets as JSON
        $SECRETS_JSON | ConvertTo-Json -Depth 100 | Out-File -FilePath secrets.json
        Write-Host "Combined secrets:"
        Get-Content -Path secrets.json | Write-Host
    
    - name: Update GitHub Secrets
      if: steps.check_vault.outputs.has_changed == 'true'
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        $ErrorActionPreference = 'Stop'
    
        # Parse repository information
        $REPO = $env:GITHUB_REPOSITORY
    
        # Read secrets from file
        if (Test-Path -Path secrets.json) {
            $SECRETS_JSON = Get-Content -Path secrets.json | ConvertFrom-Json
            Write-Host "Contents of secrets.json:"
            Get-Content -Path secrets.json | Write-Host
        } else {
            Write-Error "secrets.json file not found."
            exit 1
        }
    
        foreach ($secret in $SECRETS_JSON.PSObject.Properties) {
          $secret_name = $secret.Name
          $secret_value = $secret.Value
    
          Write-Host "Updating secret: $secret_name"
    
          # Set the secret using gh CLI
          echo $secret_value | gh secret set $secret_name --repo $REPO --app actions
          Write-Host "Secret '$secret_name' updated successfully."
        }

