name: kvV2s Retrieval

on:
  schedule:
  - cron: '0 */5 * * *' #runs every 5hrs
   # - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:

jobs:
  update-kvV2s:
    runs-on: [self-hosted, Windows, x64]
    #environment: 
      #name: APPROVAL  # Place the environment at the job level.

    steps:
    
    - name: Install jq
      shell: powershell
      run: |
        # Download jq.exe
        Invoke-WebRequest -Uri https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe -OutFile "$env:USERPROFILE\jq.exe"
        # Add the directory to PATH for the current session
        $env:PATH += ";$env:USERPROFILE"
        # Verify installation
        jq --version
    - name: Install GitHub CLI
      shell: powershell
      run: |
        # Download GitHub CLI installer
        Invoke-WebRequest -Uri https://github.com/cli/cli/releases/download/v2.40.0/gh_2.40.0_windows_amd64.msi -OutFile "$env:USERPROFILE\gh_installer.msi"
        # Install GitHub CLI silently
        Start-Process msiexec.exe -ArgumentList "/i", "$env:USERPROFILE\gh_installer.msi", "/qn", "/norestart" -Wait
        # Verify installation
        gh --version
    - name: Authenticate GitHub CLI
      shell: powershell
      env:
        GH_TOKEN: ${{ kvV2s.GH_PAT }}
      run: |
        Write-Host "Authenticating GitHub CLI..."
        echo $env:GH_TOKEN | gh auth login --with-token
        gh auth status
    - name: Verify Vault Token
      shell: powershell
      env:
        VAULT_ADDR: ${{ kvV2s.VAULT_ADDR }}
        VAULT_TOKEN: ${{ kvV2s.VAULT_TOKEN }}
      run: |
        vault.exe token lookup -format=json | jq '.data'
    - name: Cache Vault Data Hashes
      id: cache_hash
      uses: actions/cache@v3
      with:
        path: |
          .vault_data_hash_devf
          .vault_data_hash_stagef
          .vault_data_hash_prodf
          .vault_data_hash_devb
          .vault_data_hash_stageb
          .vault_data_hash_prodb
        key: vault-data-hash-${{ hashFiles('.vault_data_hash_*') }}

    - name: Check Vault for Changes
      id: check_vault
      shell: powershell
      env:
        VAULT_ADDR: ${{ kvV2s.VAULT_ADDR }}
        VAULT_TOKEN: ${{ kvV2s.VAULT_TOKEN }}
      run: |
        $ErrorActionPreference = 'Stop'
        # Define the kvV2 paths and their corresponding output names
        $kvV2_PATHS = @{
          "kvV2/Vault-POC/frontend/dev" = "f_dev_has_changed"
          "kvV2/Vault-POC/frontend/stage" = "f_stage_has_changed"
          "kvV2/Vault-POC/frontend/prod" = "f_prod_has_changed"
          "kvV2/Vault-POC/backend/dev" = "b_dev_has_changed"
          "kvV2/Vault-POC/backend/stage" = "b_stage_has_changed"
          "kvV2/Vault-POC/backend/prod" = "b_prod_has_changed"
        }
        foreach ($kvV2_PATH in $kvV2_PATHS.Keys) {
            Write-Host "Processing Vault path: $kvV2_PATH"
            try {
                # Fetch the kvV2s from the current path
                $kvV2_DATA_JSON = vault.exe kv get -format=json $kvV2_PATH | jq -r '.data.data' | ConvertTo-Json -Depth 100
                Write-Host "Fetched data from $kvV2_PATH"
            } catch {
                Write-Error "Failed to fetch kvV2s from Vault at path '$kvV2_PATH'. Error: $_"
                exit 1
            }
            # Compute a hash of the kvV2 data
            $HASH = [System.BitConverter]::ToString((New-Object System.Security.Cryptography.SHA256Managed).ComputeHash([System.Text.Encoding]::UTF8.GetBytes($kvV2_DATA_JSON))).Replace("-", "")
            # Define hash file name based on path
            $HASH_FILE = ".vault_data_hash_$($kvV2_PATH -replace '/', '_')"
            #$HASH_FILE = ".vault_data_hash_$($kvV2_PATH.Split('/')[-1])"
            # Read the old hash if it exists
            if (Test-Path $HASH_FILE) {
              $OLD_HASH = Get-Content $HASH_FILE
            } else {
              $OLD_HASH = ""
            }
            if ($HASH -ne $OLD_HASH) {
              Write-Host "Vault data has changed for path: $kvV2_PATH"
              $HASH | Out-File -FilePath $HASH_FILE
              # Set an output indicating this path has changed
              "$($kvV2_PATHS[$kvV2_PATH])=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            } else {
              Write-Host "No changes in Vault data for path: $kvV2_PATH"
              "$($kvV2_PATHS[$kvV2_PATH])=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            }
        }
    - name: Fetch and Merge kvV2s from Vault
      id: fetch_kvV2s
      if: |
        steps.check_vault.outputs.f_dev_has_changed == 'true' ||
        steps.check_vault.outputs.f_prod_has_changed == 'true' ||
        steps.check_vault.outputs.f_stage_has_changed == 'true' ||
        steps.check_vault.outputs.b_dev_has_changed == 'true' ||
        steps.check_vault.outputs.b_prod_has_changed == 'true' ||
        steps.check_vault.outputs.b_stage_has_changed == 'true'
      shell: powershell
      env:
        VAULT_ADDR: ${{ kvV2s.VAULT_ADDR }}
        VAULT_TOKEN: ${{ kvV2s.VAULT_TOKEN }}
        F_DEV_HAS_CHANGED: ${{ steps.check_vault.outputs.f_dev_has_changed }}
        F_STAGE_HAS_CHANGED: ${{ steps.check_vault.outputs.f_stage_has_changed }}
        F_PROD_HAS_CHANGED: ${{ steps.check_vault.outputs.f_prod_has_changed }}
        B_DEV_HAS_CHANGED: ${{ steps.check_vault.outputs.b_dev_has_changed }}
        B_STAGE_HAS_CHANGED: ${{ steps.check_vault.outputs.b_stage_has_changed }}
        B_PROD_HAS_CHANGED: ${{ steps.check_vault.outputs.b_prod_has_changed }}
      run: |
        $ErrorActionPreference = 'Stop'
        # Define the kvV2 paths and their corresponding GitHub kvV2 names
        $kvV2_PATHS = @{
          "kvV2/Vault-POC/frontend/dev" = "F_DEV_kvV2"
          "kvV2/Vault-POC/frontend/stage" = "F_STAGE_kvV2"
          "kvV2/Vault-POC/frontend/prod" = "F_PROD_kvV2"
          "kvV2/Vault-POC/backend/dev" = "B_DEV_kvV2"
          "kvV2/Vault-POC/backend/stage" = "B_STAGE_kvV2"
          "kvV2/Vault-POC/backend/prod" = "B_PROD_kvV2"
        }
        foreach ($kvV2_PATH in $kvV2_PATHS.Keys) {
            # Determine the corresponding 'has_changed' environment variable
            if ($kvV2_PATH -eq "kvV2/Vault-POC/frontend/dev") {
                $has_changed = $env:F_DEV_HAS_CHANGED
            } elseif ($kvV2_PATH -eq "kvV2/Vault-POC/frontend/stage") {
                $has_changed = $env:F_STAGE_HAS_CHANGED
            } elseif ($kvV2_PATH -eq "kvV2/Vault-POC/frontend/prod") {
                $has_changed = $env:F_PROD_HAS_CHANGED
            } elseif ($kvV2_PATH -eq "kvV2/Vault-POC/backend/dev") {
                $has_changed = $env:B_DEV_HAS_CHANGED
            } elseif ($kvV2_PATH -eq "kvV2/Vault-POC/backend/stage") {
                $has_changed = $env:B_STAGE_HAS_CHANGED
            } elseif ($kvV2_PATH -eq "kvV2/Vault-POC/backend/prod") {
                $has_changed = $env:B_PROD_HAS_CHANGED
            } else {
                Write-Host "Unknown kvV2 path: $kvV2_PATH"
                continue
            }
            Write-Host "Processing kvV2 path: $kvV2_PATH with has_changed: $has_changed"
            if ($has_changed -eq 'true') {
                Write-Host "Fetching and merging kvV2s for path: $kvV2_PATH"
                try {
                    $kvV2_DATA = vault.exe kv get -format=json $kvV2_PATH | jq -r '.data.data' | ConvertFrom-Json
                    Write-Host "Fetched data from $kvV2_PATH"
                } catch {
                    Write-Error "Failed to fetch kvV2s from Vault for path '$kvV2_PATH'. Error: $_"
                    exit 1
                }
                # Initialize an empty string to hold the merged kvV2s
                $MERGED_kvV2S = ""
                # Iterate over each kvV2 and append to the merged string
                foreach ($property in $kvV2_DATA.PSObject.Properties) {
                    $key = $property.Name
                    $value = $property.Value
                    $MERGED_kvV2S += "$key='$value'`n"  # Append each key-value pair with a newline
                }
                # Remove the trailing newline
                $MERGED_kvV2S = $MERGED_kvV2S.TrimEnd("`n")
                # Save the merged kvV2s to a file named based on the kvV2 name
                $GITHUB_kvV2_NAME = $kvV2_PATHS[$kvV2_PATH]
                $MERGED_kvV2S | Out-File -FilePath "merged_kvV2s_${GITHUB_kvV2_NAME}.txt"
                Write-Host "Combined kvV2s for ${GITHUB_kvV2_NAME}:"
                Get-Content -Path "merged_kvV2s_${GITHUB_kvV2_NAME}.txt" | Write-Host  # Commented out to hide kvV2s
            }
        }
    - name: List Merged kvV2s Files
      if: |
        steps.check_vault.outputs.f_dev_has_changed == 'true' ||
        steps.check_vault.outputs.f_prod_has_changed == 'true' ||
        steps.check_vault.outputs.f_stage_has_changed == 'true' ||
        steps.check_vault.outputs.b_dev_has_changed == 'true' ||
        steps.check_vault.outputs.b_prod_has_changed == 'true' ||
        steps.check_vault.outputs.b_stage_has_changed == 'true'
      shell: powershell
      run: |
        Write-Host "Listing merged kvV2s files:"
        Get-ChildItem -Path . -Filter "merged_kvV2s_*.txt" | ForEach-Object { Write-Host $_.Name }
    - name: Update GitHub kvV2s
      if: |
        steps.check_vault.outputs.f_dev_has_changed == 'true' ||
        steps.check_vault.outputs.f_prod_has_changed == 'true' ||
        steps.check_vault.outputs.f_stage_has_changed == 'true' ||
        steps.check_vault.outputs.b_dev_has_changed == 'true' ||
        steps.check_vault.outputs.b_prod_has_changed == 'true' ||
        steps.check_vault.outputs.b_stage_has_changed == 'true'
      shell: powershell
      env:
        GH_TOKEN: ${{ kvV2s.GH_PAT }}
        F_DEV_HAS_CHANGED: ${{ steps.check_vault.outputs.f_dev_has_changed }}
        F_STAGE_HAS_CHANGED: ${{ steps.check_vault.outputs.f_stage_has_changed }}
        F_PROD_HAS_CHANGED: ${{ steps.check_vault.outputs.f_prod_has_changed }}
        B_DEV_HAS_CHANGED: ${{ steps.check_vault.outputs.b_dev_has_changed }}
        B_STAGE_HAS_CHANGED: ${{ steps.check_vault.outputs.b_stage_has_changed }}
        B_PROD_HAS_CHANGED: ${{ steps.check_vault.outputs.b_prod_has_changed }}
      run: |
        $ErrorActionPreference = 'Stop'
        Write-Host "Starting Update GitHub kvV2s step..."
        # Verify gh CLI is authenticated
        gh auth status
        # Define the kvV2 paths and their corresponding GitHub kvV2 names
        $kvV2_PATHS = @{
          "kvV2/Vault-POC/frontend/dev" = "F_DEV_kvV2"
          "kvV2/Vault-POC/frontend/stage" = "F_STAGE_kvV2"
          "kvV2/Vault-POC/frontend/prod" = "F_PROD_kvV2"
          "kvV2/Vault-POC/backend/dev" = "B_DEV_kvV2"
          "kvV2/Vault-POC/backend/stage" = "B_STAGE_kvV2"
          "kvV2/Vault-POC/backend/prod" = "B_PROD_kvV2"
        }
        foreach ($kvV2_PATH in $kvV2_PATHS.Keys) {
            # Determine the corresponding 'has_changed' environment variable
            if ($kvV2_PATH -eq "kvV2/Vault-POC/frontend/dev") {
                $has_changed = $env:F_DEV_HAS_CHANGED
            } elseif ($kvV2_PATH -eq "kvV2/Vault-POC/frontend/stage") {
                $has_changed = $env:F_STAGE_HAS_CHANGED
            } elseif ($kvV2_PATH -eq "kvV2/Vault-POC/frontend/prod") {
                $has_changed = $env:F_PROD_HAS_CHANGED
            } elseif ($kvV2_PATH -eq "kvV2/Vault-POC/backend/dev") {
                $has_changed = $env:B_DEV_HAS_CHANGED
            } elseif ($kvV2_PATH -eq "kvV2/Vault-POC/backend/stage") {
                $has_changed = $env:B_STAGE_HAS_CHANGED
            } elseif ($kvV2_PATH -eq "kvV2/Vault-POC/backend/prod") {
                $has_changed = $env:B_PROD_HAS_CHANGED
            } else {
                Write-Host "Unknown kvV2 path: $kvV2_PATH"
                continue
            }
            
            Write-Host "Processing kvV2 path: $kvV2_PATH with has_changed: $has_changed"
            if ($has_changed -eq 'true') {
                $GITHUB_kvV2_NAME = $kvV2_PATHS[$kvV2_PATH]
                $MERGED_FILE = "merged_kvV2s_${GITHUB_kvV2_NAME}.txt"
                
                Write-Host "Updating GitHub kvV2: ${GITHUB_kvV2_NAME}"
                
                if (Test-Path -Path $MERGED_FILE) {
                    $MERGED_kvV2S = Get-Content -Path $MERGED_FILE -Raw
                    Write-Host "Contents of ${MERGED_FILE}:"
                    Write-Host "${MERGED_kvV2S}"  # Commented out to hide kvV2s
                } else {
                    Write-Error "${MERGED_FILE} file not found."
                    exit 1
                }
                
                # Set the merged kvV2 using gh CLI
                Write-Host "Executing gh kvV2 set for ${GITHUB_kvV2_NAME}..."
                try {
                    $MERGED_kvV2S | gh kvV2 set $GITHUB_kvV2_NAME --repo ${{ github.repository }} --body -
                    Write-Host "kvV2 '${GITHUB_kvV2_NAME}' updated successfully."
                } catch {
                    Write-Error "Failed to set kvV2 '${GITHUB_kvV2_NAME}'. Error: $_"
                    exit 1
                }
            } else {
                Write-Host "No changes detected for kvV2 path: $kvV2_PATH"
            }
        }
